
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 14 21:37:30 CEST 2025
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 14 21:37:30 CEST 2025
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\004\000\002\057\002\000\002\002" +
    "\004\000\002\003\011\000\002\004\004\000\002\004\003" +
    "\000\002\007\004\000\002\007\003\000\002\011\004\000" +
    "\002\011\003\000\002\013\003\000\002\013\002\000\002" +
    "\006\003\000\002\006\004\000\002\015\010\000\002\016" +
    "\003\000\002\016\003\000\002\010\003\000\002\010\004" +
    "\000\002\017\012\000\002\020\003\000\002\020\004\000" +
    "\002\021\006\000\002\012\003\000\002\012\004\000\002" +
    "\023\006\000\002\023\005\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\014\003\000\002\014\004" +
    "\000\002\024\003\000\002\024\003\000\002\025\014\000" +
    "\002\025\013\000\002\027\005\000\002\027\003\000\002" +
    "\033\005\000\002\033\006\000\002\034\005\000\002\034" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\003" +
    "\000\002\032\007\000\002\026\012\000\002\026\011\000" +
    "\002\005\007\000\002\005\006\000\002\035\004\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\040\006\000\002\045\003\000\002\045\003\000" +
    "\002\041\011\000\002\041\013\000\002\042\011\000\002" +
    "\037\007\000\002\050\003\000\002\050\003\000\002\043" +
    "\005\000\002\044\004\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\005\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\053\003\000\002\053" +
    "\003\000\002\054\003\000\002\054\003\000\002\052\003" +
    "\000\002\047\005\000\002\047\005\000\002\051\006\000" +
    "\002\051\005\000\002\056\003\000\002\056\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\004\034\000\001\002\000\004\002\303\001" +
    "\002\000\004\034\006\001\002\000\004\024\010\001\002" +
    "\000\004\002\uffff\001\002\000\004\012\011\001\002\000" +
    "\004\013\012\001\002\000\004\037\013\001\002\000\014" +
    "\024\030\034\014\036\022\044\ufff6\047\025\001\002\000" +
    "\004\024\270\001\002\000\014\024\164\034\014\036\022" +
    "\044\ufff6\047\025\001\002\000\004\044\ufff8\001\002\000" +
    "\004\044\ufffa\001\002\000\004\044\ufffc\001\002\000\014" +
    "\024\ufff5\034\ufff5\036\ufff5\044\ufff5\047\ufff5\001\002\000" +
    "\004\024\224\001\002\000\010\034\uffe1\036\uffe1\044\uffe1" +
    "\001\002\000\012\024\uffea\034\uffea\036\uffea\044\uffea\001" +
    "\002\000\004\024\207\001\002\000\010\034\014\036\022" +
    "\044\ufff7\001\002\000\010\034\uffe3\036\uffe3\044\uffe3\001" +
    "\002\000\006\016\166\020\177\001\002\000\014\024\030" +
    "\034\014\036\022\044\ufff6\047\025\001\002\000\012\024" +
    "\164\034\014\036\022\044\ufff6\001\002\000\010\034\uffe0" +
    "\036\uffe0\044\uffe0\001\002\000\004\044\037\001\002\000" +
    "\014\024\ufff0\034\ufff0\036\ufff0\044\ufff0\047\ufff0\001\002" +
    "\000\004\002\ufffe\001\002\000\016\024\057\027\041\030" +
    "\040\032\052\033\046\043\053\001\002\000\012\012\070" +
    "\021\065\022\064\024\074\001\002\000\004\012\146\001" +
    "\002\000\020\024\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\043\uffcc\001\002\000\004\010\143\001\002\000" +
    "\020\024\057\027\041\030\040\031\uffce\032\052\033\046" +
    "\043\uffce\001\002\000\020\024\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\043\uffcd\001\002\000\012\012\070" +
    "\021\065\022\064\024\074\001\002\000\020\024\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\043\uffc9\001\002" +
    "\000\020\024\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\043\uffca\001\002\000\004\017\126\001\002\000\012" +
    "\012\070\021\065\022\064\024\074\001\002\000\004\024" +
    "\122\001\002\000\004\043\117\001\002\000\004\010\uffc5" +
    "\001\002\000\020\024\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\043\uffc8\001\002\000\010\010\uffc6\011\061" +
    "\012\062\001\002\000\020\024\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\043\uffcb\001\002\000\004\024\115" +
    "\001\002\000\014\012\070\013\063\021\065\022\064\024" +
    "\074\001\002\000\026\004\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\013\uffaa\016\uffaa\017\uffaa\026\uffaa\040\uffaa\045\uffaa\001" +
    "\002\000\026\004\uffb5\005\uffb5\006\uffb5\007\uffb5\013\uffb5" +
    "\016\uffb5\017\uffb5\026\uffb5\040\uffb5\045\uffb5\001\002\000" +
    "\026\004\uffb3\005\uffb3\006\uffb3\007\uffb3\013\uffb3\016\uffb3" +
    "\017\uffb3\026\uffb3\040\uffb3\045\uffb3\001\002\000\020\004" +
    "\102\005\077\006\104\007\105\013\uffa9\016\113\026\100" +
    "\001\002\000\004\013\112\001\002\000\012\012\070\021" +
    "\065\022\064\024\074\001\002\000\026\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\013\uffb7\016\uffb7\017\uffb7\026\uffb7\040" +
    "\uffb7\045\uffb7\001\002\000\026\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\013\uffb8\016\uffb8\017\uffb8\026\uffb8\040\uffb8\045" +
    "\uffb8\001\002\000\026\004\uffb9\005\uffb9\006\uffb9\007\uffb9" +
    "\013\uffb9\016\uffb9\017\uffb9\026\uffb9\040\uffb9\045\uffb9\001" +
    "\002\000\032\004\uffb4\005\uffb4\006\uffb4\007\uffb4\011\061" +
    "\012\062\013\uffb4\016\uffb4\017\uffb4\026\uffb4\040\uffb4\045" +
    "\uffb4\001\002\000\016\004\102\005\077\006\104\007\105" +
    "\013\076\026\100\001\002\000\026\004\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\013\uffb6\016\uffb6\017\uffb6\026\uffb6\040\uffb6" +
    "\045\uffb6\001\002\000\012\012\uffb0\021\uffb0\022\uffb0\024" +
    "\uffb0\001\002\000\012\012\uffae\021\uffae\022\uffae\024\uffae" +
    "\001\002\000\012\012\070\021\065\022\064\024\074\001" +
    "\002\000\012\012\uffaf\021\uffaf\022\uffaf\024\uffaf\001\002" +
    "\000\012\012\070\021\065\022\064\024\074\001\002\000" +
    "\012\012\uffb1\021\uffb1\022\uffb1\024\uffb1\001\002\000\012" +
    "\012\uffb2\021\uffb2\022\uffb2\024\uffb2\001\002\000\012\012" +
    "\070\021\065\022\064\024\074\001\002\000\026\004\102" +
    "\005\077\006\104\007\105\013\uffba\016\uffba\017\uffba\026" +
    "\100\040\uffba\045\uffba\001\002\000\026\004\102\005\077" +
    "\006\104\007\105\013\uffbc\016\uffbc\017\uffbc\026\100\040" +
    "\uffbc\045\uffbc\001\002\000\026\004\102\005\077\006\104" +
    "\007\105\013\uffbb\016\uffbb\017\uffbb\026\100\040\uffbb\045" +
    "\uffbb\001\002\000\026\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\013\uffab\016\uffab\017\uffab\026\uffab\040\uffab\045\uffab\001" +
    "\002\000\012\012\070\021\065\022\064\024\074\001\002" +
    "\000\004\013\uffa8\001\002\000\032\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\010\uffad\011\061\013\uffad\016\uffad\017\uffad" +
    "\026\uffad\040\uffad\045\uffad\001\002\000\030\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\013\uffac\016\uffac\017\uffac" +
    "\026\uffac\040\uffac\045\uffac\001\002\000\004\024\120\001" +
    "\002\000\004\017\121\001\002\000\012\002\uffd1\034\uffd1" +
    "\036\uffd1\044\uffd1\001\002\000\004\017\123\001\002\000" +
    "\012\002\uffd0\034\uffd0\036\uffd0\044\uffd0\001\002\000\016" +
    "\004\102\005\077\006\104\007\105\017\125\026\100\001" +
    "\002\000\020\024\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\043\uffbe\001\002\000\020\024\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\043\uffbd\001\002\000\016" +
    "\004\102\005\077\006\104\007\105\026\100\040\130\001" +
    "\002\000\014\024\057\027\041\030\040\032\052\033\046" +
    "\001\002\000\006\031\132\043\133\001\002\000\014\024" +
    "\057\027\041\030\040\032\052\033\046\001\002\000\004" +
    "\033\134\001\002\000\004\017\135\001\002\000\020\024" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\043\uffc4" +
    "\001\002\000\004\043\137\001\002\000\004\033\140\001" +
    "\002\000\004\017\141\001\002\000\020\024\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\043\uffc3\001\002\000" +
    "\006\031\uffcf\043\uffcf\001\002\000\012\012\070\021\065" +
    "\022\064\024\074\001\002\000\016\004\102\005\077\006" +
    "\104\007\105\017\145\026\100\001\002\000\020\024\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\043\uffc7\001" +
    "\002\000\014\012\070\021\065\022\064\023\147\024\074" +
    "\001\002\000\004\013\uffbf\001\002\000\004\013\152\001" +
    "\002\000\016\004\102\005\077\006\104\007\105\013\uffc0" +
    "\026\100\001\002\000\004\017\153\001\002\000\020\024" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\043\uffc1" +
    "\001\002\000\016\004\102\005\077\006\104\007\105\026" +
    "\100\045\155\001\002\000\014\024\057\027\041\030\040" +
    "\032\052\033\046\001\002\000\004\043\157\001\002\000" +
    "\004\045\160\001\002\000\004\017\161\001\002\000\020" +
    "\024\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\043" +
    "\uffc2\001\002\000\012\024\uffe9\034\uffe9\036\uffe9\044\uffe9" +
    "\001\002\000\004\044\ufff9\001\002\000\006\016\166\020" +
    "\165\001\002\000\010\024\172\041\170\042\173\001\002" +
    "\000\004\024\164\001\002\000\012\024\uffe7\034\uffe7\036" +
    "\uffe7\044\uffe7\001\002\000\006\013\uffe6\017\uffe6\001\002" +
    "\000\004\017\174\001\002\000\006\013\uffe4\017\uffe4\001" +
    "\002\000\006\013\uffe5\017\uffe5\001\002\000\012\024\uffe8" +
    "\034\uffe8\036\uffe8\044\uffe8\001\002\000\014\024\ufff4\034" +
    "\ufff4\036\ufff4\044\ufff4\047\ufff4\001\002\000\004\044\ufffd" +
    "\001\002\000\012\024\172\025\200\041\170\042\173\001" +
    "\002\000\004\010\201\001\002\000\006\021\203\022\204" +
    "\001\002\000\004\017\205\001\002\000\004\017\ufff2\001" +
    "\002\000\004\017\ufff1\001\002\000\014\024\ufff3\034\ufff3" +
    "\036\ufff3\044\ufff3\047\ufff3\001\002\000\010\034\uffe2\036" +
    "\uffe2\044\uffe2\001\002\000\004\037\210\001\002\000\004" +
    "\035\211\001\002\000\004\024\212\001\002\000\004\020" +
    "\221\001\002\000\006\024\212\043\215\001\002\000\006" +
    "\024\uffed\043\uffed\001\002\000\004\035\217\001\002\000" +
    "\006\024\uffec\043\uffec\001\002\000\004\017\220\001\002" +
    "\000\014\024\uffee\034\uffee\036\uffee\044\uffee\047\uffee\001" +
    "\002\000\010\024\172\041\170\042\173\001\002\000\004" +
    "\017\223\001\002\000\006\024\uffeb\043\uffeb\001\002\000" +
    "\004\012\225\001\002\000\006\013\232\024\230\001\002" +
    "\000\004\013\260\001\002\000\004\020\254\001\002\000" +
    "\006\016\252\020\uffd8\001\002\000\006\013\uffdc\017\250" +
    "\001\002\000\004\032\233\001\002\000\006\041\234\042" +
    "\236\001\002\000\004\037\uffd7\001\002\000\004\037\237" +
    "\001\002\000\004\037\uffd6\001\002\000\014\024\164\034" +
    "\014\036\022\044\ufff6\047\025\001\002\000\004\044\243" +
    "\001\002\000\004\044\uffd5\001\002\000\010\034\uffde\036" +
    "\uffde\044\uffde\001\002\000\014\024\057\027\041\030\040" +
    "\032\052\033\046\001\002\000\004\043\245\001\002\000" +
    "\004\024\246\001\002\000\004\017\247\001\002\000\010" +
    "\034\uffd4\036\uffd4\044\uffd4\001\002\000\004\024\230\001" +
    "\002\000\004\013\uffdd\001\002\000\004\024\230\001\002" +
    "\000\004\020\uffd9\001\002\000\012\024\172\041\170\042" +
    "\173\046\255\001\002\000\010\024\172\041\170\042\173" +
    "\001\002\000\006\013\uffdb\017\uffdb\001\002\000\006\013" +
    "\uffda\017\uffda\001\002\000\004\032\261\001\002\000\006" +
    "\041\234\042\236\001\002\000\004\037\263\001\002\000" +
    "\014\024\164\034\014\036\022\044\ufff6\047\025\001\002" +
    "\000\004\044\243\001\002\000\010\034\uffdf\036\uffdf\044" +
    "\uffdf\001\002\000\004\044\ufffb\001\002\000\014\024\uffef" +
    "\034\uffef\036\uffef\044\uffef\047\uffef\001\002\000\004\012" +
    "\271\001\002\000\006\013\273\024\230\001\002\000\004" +
    "\013\277\001\002\000\004\037\274\001\002\000\014\024" +
    "\164\034\014\036\022\044\ufff6\047\025\001\002\000\004" +
    "\044\037\001\002\000\010\034\uffd2\036\uffd2\044\uffd2\001" +
    "\002\000\004\037\300\001\002\000\014\024\164\034\014" +
    "\036\022\044\ufff6\047\025\001\002\000\004\044\037\001" +
    "\002\000\010\034\uffd3\036\uffd3\044\uffd3\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\006\002\003\057\004\001\001\000\002\001" +
    "\001\000\004\003\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\033\006\030\007\017\010\014\011\016" +
    "\012\031\013\015\014\025\015\020\017\034\023\023\024" +
    "\026\025\022\026\032\001\001\000\002\001\001\000\024" +
    "\011\265\012\031\013\015\014\025\017\266\023\023\024" +
    "\026\025\022\026\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\205\025\022\026\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\175\010\014\011\016" +
    "\012\031\013\015\014\025\015\174\017\034\023\023\024" +
    "\026\025\022\026\032\001\001\000\016\013\162\014\025" +
    "\023\161\024\026\025\022\026\032\001\001\000\002\001" +
    "\001\000\004\005\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\035\053\036\043\037\044\040\041\041" +
    "\057\042\047\043\046\044\055\045\042\047\054\051\050" +
    "\001\001\000\012\046\153\047\072\051\071\055\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\035\141\036\043\037\044\040\041\041\057\042" +
    "\047\043\046\044\055\045\042\047\054\051\050\001\001" +
    "\000\002\001\001\000\012\046\126\047\072\051\071\055" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\046\123\047\072\051\071\055\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\115\001\001\000\014\046\065\047\072\051\071" +
    "\055\070\056\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\052\102\053\100\054\105" +
    "\001\001\000\002\001\001\000\012\046\074\047\072\051" +
    "\071\055\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\052\102\053" +
    "\100\054\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\046\110\047\072\051\071\055" +
    "\070\001\001\000\002\001\001\000\012\046\107\047\072" +
    "\051\071\055\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\046\106\047\072\051\071\055\070\001\001" +
    "\000\010\052\102\053\100\054\105\001\001\000\010\052" +
    "\102\053\100\054\105\001\001\000\010\052\102\053\100" +
    "\054\105\001\001\000\002\001\001\000\014\046\065\047" +
    "\072\051\071\055\070\056\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\102\053\100\054\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\052\102\053\100" +
    "\054\105\001\001\000\030\035\130\036\043\037\044\040" +
    "\041\041\057\042\047\043\046\044\055\045\042\047\054" +
    "\051\050\001\001\000\002\001\001\000\030\035\135\036" +
    "\043\037\044\040\041\041\057\042\047\043\046\044\055" +
    "\045\042\047\054\051\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\046\143\047\072\051\071\055\070\001\001" +
    "\000\010\052\102\053\100\054\105\001\001\000\002\001" +
    "\001\000\014\046\150\047\072\050\147\051\071\055\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\052" +
    "\102\053\100\054\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\102\053\100\054\105\001\001\000" +
    "\030\035\155\036\043\037\044\040\041\041\057\042\047" +
    "\043\046\044\055\045\042\047\054\051\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\170\001\001\000\004\023\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\170\001\001\000" +
    "\002\001\001\000\004\016\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\212\021\213\001\001\000\002\001\001\000\004\021" +
    "\215\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\027\225\033\230\034\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\240\010\014\011\016\012\031\013\015\014\025\017" +
    "\034\023\023\024\026\025\022\026\032\031\237\001\001" +
    "\000\004\032\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\035\243\036\043\037\044\040\041\041\057" +
    "\042\047\043\046\044\055\045\042\047\054\051\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\027\250\033\230\034\226\001" +
    "\001\000\002\001\001\000\004\034\252\001\001\000\002" +
    "\001\001\000\004\022\255\001\001\000\004\022\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\261\001\001\000\002\001\001\000\032\007" +
    "\240\010\014\011\016\012\031\013\015\014\025\017\034" +
    "\023\023\024\026\025\022\026\032\031\263\001\001\000" +
    "\004\032\264\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\027\271\033" +
    "\230\034\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\240\010\014\011\016\012\031\013\015\014" +
    "\025\017\034\023\023\024\026\025\022\026\032\031\274" +
    "\001\001\000\004\005\275\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\007\240\010\014\011\016\012\031" +
    "\013\015\014\025\017\034\023\023\024\026\025\022\026" +
    "\032\031\300\001\001\000\004\005\301\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // listaParametrosInvocacion ::= expresion DELIMLISTA listaParametrosInvocacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosInvocacion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listaParametrosInvocacion ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametrosInvocacion",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exprFuncion ::= IDENTIFICADOR PARENTESISAP PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exprFuncion ::= IDENTIFICADOR PARENTESISAP listaParametrosInvocacion PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprFuncion",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresionAccesoRegistro ::= IDENTIFICADOR ACCESO expresionAccesoRegistro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAccesoRegistro",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresionAccesoRegistro ::= IDENTIFICADOR ACCESO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionAccesoRegistro",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadorLogico ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorLogico",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadorAritmetico ::= MULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadorAritmetico ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorAritmetico",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadorRelacional ::= MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadorRelacional ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operando ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operando ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operando ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= PARENTESISAP expresion PARENTESISCIERRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= exprFuncion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= expresionAccesoRegistro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresion operadorAritmetico expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= expresion operadorRelacional expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= expresion operadorLogico expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentenciaProcedimiento ::= exprFuncion DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaProcedimiento",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentenciaReturn ::= RETURN expresion DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaReturn",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametro ::= CADENACARACTERES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametro ::= expresion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentenciaPutLine ::= PUTLINE PARENTESISAP parametro PARENTESISCIERRE DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaPutLine",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentenciaWhile ::= WHILE expresion LOOP sentencias END LOOP DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaWhile",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentenciaIf ::= IF expresion THEN sentencias ELSE sentencias END IF DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentenciaIf ::= IF expresion THEN sentencias END IF DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaIf",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ref ::= expresionAccesoRegistro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ref ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ref",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentenciaAsignacion ::= ref ASIGNACION expresion DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentenciaAsignacion",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia ::= sentenciaProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia ::= sentenciaReturn 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentencia ::= sentenciaWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia ::= sentenciaIf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencia ::= sentenciaAsignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencia ::= sentenciaPutLine 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencias ::= sentencia sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpo ::= BEGIN END IDENTIFICADOR DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpo ::= BEGIN sentencias END IDENTIFICADOR DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declProcedimiento ::= PROCEDURE IDENTIFICADOR PARENTESISAP PARENTESISCIERRE IS declaracionesFunction cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declProcedimiento",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declProcedimiento ::= PROCEDURE IDENTIFICADOR PARENTESISAP declParametros PARENTESISCIERRE IS declaracionesFunction cuerpo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declProcedimiento",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpoFunction ::= BEGIN sentencias END IDENTIFICADOR DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cuerpoFunction",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracionesFunction ::= grupoDeclaraciones1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionesFunction",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tipoRetorno ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tipoRetorno ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoRetorno",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listaParametros ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaParametros ::= IDENTIFICADOR DELIMLISTA listaParametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaParametros",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declParametro ::= listaParametros DELIMTIPO OUT tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametro",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declParametro ::= listaParametros DELIMTIPO tipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametro",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declParametros ::= declParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declParametros ::= declParametro DELIMPUNTOCOMA declParametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declParametros",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declFunction ::= FUNCTION IDENTIFICADOR PARENTESISAP PARENTESISCIERRE RETURN tipoRetorno IS declaracionesFunction cuerpoFunction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declFunction",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declFunction ::= FUNCTION IDENTIFICADOR PARENTESISAP declParametros PARENTESISCIERRE RETURN tipoRetorno IS declaracionesFunction cuerpoFunction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declFunction",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declSubprograma ::= declProcedimiento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprograma",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declSubprograma ::= declFunction 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprograma",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declSubprogramas ::= declSubprogramas declSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprogramas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declSubprogramas ::= declSubprograma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declSubprogramas",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declVariable ::= IDENTIFICADOR DELIMLISTA declVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declVariable ::= IDENTIFICADOR DELIMTIPO tipo DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariable",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declVariables ::= declVariables declVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declVariables ::= declVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declVariables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declCampo ::= IDENTIFICADOR DELIMTIPO tipo DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCampo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declCampos ::= declCampos declCampo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCampos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declCampos ::= declCampo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declCampos",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declTipo ::= TYPE IDENTIFICADOR IS RECORD declCampos END RECORD DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declTipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declTipos ::= declTipos declTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declTipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declTipos ::= declTipo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declTipos",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= BOOLEANO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // literal ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constante ::= IDENTIFICADOR DELIMTIPO CONSTANT ASIGNACION literal DELIMPUNTOCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("constante",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declConstantes ::= declConstantes constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declConstantes ::= constante 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declConstantes",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // grupoDeclaraciones3 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // grupoDeclaraciones3 ::= declSubprogramas 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones3",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // grupoDeclaraciones2 ::= grupoDeclaraciones3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // grupoDeclaraciones2 ::= declVariables grupoDeclaraciones3 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones2",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // grupoDeclaraciones1 ::= grupoDeclaraciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // grupoDeclaraciones1 ::= declTipos grupoDeclaraciones2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("grupoDeclaraciones1",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= grupoDeclaraciones1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declConstantes grupoDeclaraciones1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= PROCEDURE IDENTIFICADOR PARENTESISAP PARENTESISCIERRE IS declaraciones cuerpo 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		// No modificar esta estructura, aunque se pueden añadir más acciones semánticas
  		
  		//List intermediateCode = ax.getIntermediateCode ();
  		//finalCodeFactory.create (intermediateCode);

  		// En caso de no comentarse las dos sentencias anteriores se puede generar una excepcion
  		// en las llamadas a cupTest si el compilador no está completo. Esto es debido a que 
  		// aún no se tendrá implementada la generación de código intermedio ni final.
  		// Para la entrega final deberán descomentarse y usarse.
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  		
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

